% Kelly Harke, Erica Lemieux
% ENGO 559 - Digital Imaging
% Final Project
% Normalized 2D cross-correlation (NCC)

% Definition:
% normxcorr2()computes the normalized cross-correlation of an 
% input image, A, and a template matrix. The resulting matrix C 
% contains the correlation coefficients.

clear all;
close all;
clc;

%% I. EXAMPLE I - Use Cross-Correlation to find template in image

% 1. Choose 2 images, one which is the sub-set of the other

subimage = rgb2gray(imread('orange3.JPG')); % read images and convert to grayscale
image = rgb2gray(imread('fruit1.JPG'));

imshowpair(image, subimage, 'montage')

% 2. Perform cross-correlation, and display the result as a surface
d = normxcorr2(subimage, image);
figure
surf(d)
shading flat

image = im2double(image);
subimage = im2double(subimage);

% Make subimage oddxodd
if mod(size(subimage, 1), 2) ~= 1 % rows = 1 keep
    subimage(size(subimage, 1), :) = [];
end
if mod(size(subimage, 2), 2) ~= 1 % rows = 1 keep
    subimage(:, size(subimage, 2)) = [];
end

[r,c] = size(image);
[m,n] = size(subimage);

subimage_size = m*n; % size of subimage
subimage_mean = sum(subimage, 'all') / subimage_size;
sum1 = 0;
sum2 = 0;

mid_rows = floor(m / 2);
mid_cols = floor(n / 2);
output = zeros(r, c);

% pad with zeros
Rep = zeros(r + mid_rows, c + mid_cols);
j = 1;
k = 1;
for x = mid_rows+1:r-mid_rows
    for y = mid_cols+1:c-mid_cols
        Rep(x, y) = image(j, k);
        k = k+1;
    end
    j = j+1;
    k = 1;
end

for x = mid_rows+1:size(Rep, 1)-mid_rows
    for y = mid_cols+1:size(Rep, 2)-mid_cols
        image_mean = sum(Rep(x-mid_rows:x+mid_rows, y-mid_cols:y+mid_cols), 'all') / subimage_size;
        numerator = sum(sum((Rep(x-mid_rows:x+mid_rows, y-mid_cols:y+mid_cols)-image_mean).*(subimage-subimage_mean)));
        denominator = power(sum(sum(power(Rep(x-mid_rows:x+mid_rows, y-mid_cols:y+mid_cols)-image_mean, 2)))*sum(sum(power(subimage-subimage_mean, 2))), 0.5);
        output(x, y) = numerator / denominator;
    end
end

% display
figure
surf(output)
shading flat


% for x = 1 : r+m-1
%     for y = 1 : n+c-1
%         image_mean = sum(Rep(x:x+m-1 , y:y+n-1), 'all') / subimage_size;
%         for i = 1 : m
%             for j = 1 : n
%                 term1 = Rep(x+i-1, y+j-1) - image_mean;
%                 term2 = subimage(i, j) - subimage_mean;
%                 output(x, y) = output(x, y) + (term1*term2) ;
%                 sum1 = term1*term1 + sum1;
%                 sum2 = term2*term2 + sum2;
%             end
%         end
%         output(x, y) = output(x, y) / (power(sum1, 0.5)*power(sum2, 0.5));
%         sum1 = 0;
%         sum2 = 0;
%     end
% end
% 
% % display
% figure
% surf(output)
% shading flat

% 3. Find the peak in cross-correlation

[ypeak, xpeak] = find(output==max(output(:)));

% 4. Account for the padding that normxcorr2 adds

yoffSet = ypeak-size(subimage, 1);
xoffSet = xpeak-size(subimage, 2);

% 5. Display the matched area

figure;
imshow(image);
imrect(gca, [xoffSet+1, yoffSet+1, size(subimage,2), size(subimage,1)]);







